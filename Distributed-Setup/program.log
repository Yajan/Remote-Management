04/06/2018 04:34:24 PM - __name__ - INFO - Display Setup Running
04/06/2018 04:34:24 PM - __name__ - INFO - Starting execution
04/06/2018 04:34:24 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 04:34:24 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 04:34:24 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 04:34:24 PM - __name__ - INFO - Input file : C:\Users\Yajana\PycharmProjects\Distributed-setup-4\Test\Input.yaml
04/06/2018 04:34:24 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 04:34:24 PM - __name__ - INFO - Connected to 192.168.0.7
04/06/2018 04:34:24 PM - __name__ - INFO - 127.0.0.1
04/06/2018 04:34:24 PM - __name__ - INFO - EDIT::127.0.0.1
04/06/2018 04:34:24 PM - __name__ - INFO - Executing in 192.168.0.7
04/06/2018 04:37:06 PM - __name__ - INFO - Display Setup Running
04/06/2018 04:37:06 PM - __name__ - INFO - Starting execution
04/06/2018 04:37:06 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 04:37:06 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 04:37:06 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 04:37:06 PM - __name__ - INFO - Input file : C:\Users\Yajana\PycharmProjects\Distributed-setup-4\Test\Input.yaml
04/06/2018 04:37:06 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 04:37:27 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 0
04/06/2018 04:37:48 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 1
04/06/2018 04:38:09 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 2
04/06/2018 04:38:10 PM - __name__ - WARNING - Unable to Connect to IP
04/06/2018 04:38:10 PM - __name__ - INFO - Connected to 192.168.0.7
04/06/2018 04:38:10 PM - __name__ - INFO - 127.0.0.1
04/06/2018 04:38:10 PM - __name__ - INFO - EDIT::127.0.0.1
04/06/2018 04:38:10 PM - __name__ - INFO - Executing in 192.168.0.7
04/06/2018 04:40:46 PM - __name__ - INFO - Display Setup Running
04/06/2018 04:40:46 PM - __name__ - INFO - Starting execution
04/06/2018 04:40:46 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 04:40:46 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 04:40:46 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 04:40:46 PM - __name__ - INFO - Input file : C:\Users\Yajana\PycharmProjects\Distributed-setup-4\Test\Input.yaml
04/06/2018 04:40:46 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 04:41:07 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 0
04/06/2018 04:41:28 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 1
04/06/2018 04:41:49 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 2
04/06/2018 04:41:49 PM - __name__ - WARNING - Unable to Connect to IP : 172.23.1.79
04/06/2018 04:41:49 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 04:41:49 PM - __name__ - INFO - 127.0.0.1, 192.168.0.8
04/06/2018 04:41:49 PM - __name__ - INFO - EDIT::127.0.0.1, 192.168.0.8
04/06/2018 04:41:49 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 04:41:49 PM - __name__ - INFO - 192.168.0.8 : Done
04/06/2018 04:41:50 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 0
04/06/2018 04:41:51 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 1
04/06/2018 04:41:53 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 2
04/06/2018 04:41:53 PM - __name__ - WARNING - Unable to Connect to IP : 192.168.0.7
04/06/2018 04:41:53 PM - __name__ - INFO - IP : ['172.23.1.79', '192.168.0.8', '192.168.0.7']
04/06/2018 04:41:53 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 04:41:53 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 04:41:53 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 04:41:53 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 04:41:53 PM - __name__ - INFO - Script Execution
04/06/2018 04:41:53 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 04:41:53 PM - __name__ - INFO - Execution Parameters : {'timeout': 2400, 'ips': ['172.23.1.79', '192.168.0.8', '192.168.0.7'], 'concurrency': 2, 'url': 'https://app.mammoth.io/#/login', 'rampup': 3, 'browser': 'chrome', 'iteration': 2}
04/06/2018 04:41:53 PM - __name__ - INFO - Starting Execution
04/06/2018 04:41:53 PM - __name__ - INFO - {'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel', 'system': 'Windows', 'name': uname_result(system='Windows', node='DESKTOP-4HBDBJJ', release='10', version='10.0.16299', machine='AMD64', processor='Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'platform': 'Windows-10-10.0.16299-SP0', 'version': '10.0.16299', 'mechine': 'AMD64'}
04/06/2018 04:41:53 PM - __name__ - INFO - Execution Started
04/06/2018 04:41:53 PM - __name__ - INFO - COMMAND:: -r -Gusers=2 -Grampup=3 -Gcount=2 -Gduration=2400 -GUrl=https://app.mammoth.io/#/login
04/06/2018 04:41:53 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 04:41:53 PM - __name__ - INFO - COMMAND:: -r -Gusers=2 -Grampup=3 -Gcount=2 -Gduration=2400 -GUrl=https://app.mammoth.io/#/login
04/06/2018 04:41:53 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 04:41:58 PM - __name__ - INFO - 192.168.0.8 : b"Error in NonGUIDriver java.lang.IllegalArgumentException: Problem loading XML from:'C:\\Users\\Yajana\\PycharmProjects\\Distributed-setup-4\\Distributed-Setup\\Client\\file_received.jmx', missing class com.thoughtworks.xstream.converters.ConversionException: \n---- Debugging information ----\ncause-exception     : com.thoughtworks.xstream.converters.ConversionException\ncause-message       : \nfirst-jmeter-class  : org.apache.jmeter.save.converters.TestElementConverter.unmarshal(TestElementConverter.java:107)\nclass               : org.apache.jmeter.save.ScriptWrapper\nrequired-type       : org.apache.jmeter.testelement.property.BooleanProperty\nconverter-type      : org.apache.jmeter.save.ScriptWrapperConverter\npath                : /jmeterTestPlan/hashTree/WorkBench/boolProp\nline number         : 325\nversion             : 3.3 r1808647\n-------------------------------\r\n"
04/06/2018 04:52:51 PM - __name__ - INFO - Display Setup Running
04/06/2018 04:52:51 PM - __name__ - INFO - Starting execution
04/06/2018 04:52:51 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 04:52:51 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 04:52:51 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 04:52:51 PM - __name__ - INFO - Input file : C:\Users\Yajana\PycharmProjects\Distributed-setup-4\Test\Input.yaml
04/06/2018 04:52:51 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 04:53:12 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 0
04/06/2018 04:53:33 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 1
04/06/2018 04:53:54 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 2
04/06/2018 04:53:54 PM - __name__ - WARNING - Unable to Connect to IP : 172.23.1.79
04/06/2018 04:53:54 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 04:53:54 PM - __name__ - INFO - 127.0.0.1, 192.168.0.8
04/06/2018 04:53:54 PM - __name__ - INFO - EDIT::127.0.0.1, 192.168.0.8
04/06/2018 04:53:54 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 04:53:54 PM - __name__ - INFO - 192.168.0.8 : Done
04/06/2018 04:53:55 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 0
04/06/2018 04:53:57 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 1
04/06/2018 04:53:58 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 2
04/06/2018 04:53:58 PM - __name__ - WARNING - Unable to Connect to IP : 192.168.0.7
04/06/2018 04:53:58 PM - __name__ - INFO - IP : ['172.23.1.79', '192.168.0.8', '192.168.0.7']
04/06/2018 04:53:58 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 04:53:58 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 04:53:58 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 04:53:58 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 04:53:58 PM - __name__ - INFO - Script Execution
04/06/2018 04:53:58 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 04:53:58 PM - __name__ - INFO - Execution Parameters : {'url': 'https://app.mammoth.io/#/login', 'browser': 'chrome', 'timeout': 2400, 'rampup': 3, 'ips': ['172.23.1.79', '192.168.0.8', '192.168.0.7'], 'concurrency': 2, 'iteration': 2}
04/06/2018 04:53:58 PM - __name__ - INFO - Starting Execution
04/06/2018 04:53:58 PM - __name__ - INFO - {'name': uname_result(system='Windows', node='DESKTOP-4HBDBJJ', release='10', version='10.0.16299', machine='AMD64', processor='Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'version': '10.0.16299', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel', 'system': 'Windows', 'mechine': 'AMD64', 'platform': 'Windows-10-10.0.16299-SP0'}
04/06/2018 04:53:58 PM - __name__ - INFO - Execution Started
04/06/2018 04:53:58 PM - __name__ - INFO - COMMAND:: -r -Gusers=2 -Grampup=3 -Gcount=2 -Gduration=2400 -GUrl=https://app.mammoth.io/#/login
04/06/2018 04:53:58 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 04:53:58 PM - __name__ - INFO - COMMAND:: -r -Gusers=2 -Grampup=3 -Gcount=2 -Gduration=2400 -GUrl=https://app.mammoth.io/#/login
04/06/2018 04:53:58 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 04:54:03 PM - __name__ - INFO - 192.168.0.8 : b"Error in NonGUIDriver java.lang.IllegalArgumentException: Problem loading XML from:'C:\\Users\\Yajana\\PycharmProjects\\Distributed-setup-4\\Distributed-Setup\\Client\\file_received.jmx', missing class com.thoughtworks.xstream.converters.ConversionException: \n---- Debugging information ----\ncause-exception     : com.thoughtworks.xstream.converters.ConversionException\ncause-message       : \nfirst-jmeter-class  : org.apache.jmeter.save.converters.TestElementConverter.unmarshal(TestElementConverter.java:107)\nclass               : org.apache.jmeter.save.ScriptWrapper\nrequired-type       : org.apache.jmeter.testelement.property.BooleanProperty\nconverter-type      : org.apache.jmeter.save.ScriptWrapperConverter\npath                : /jmeterTestPlan/hashTree/WorkBench/boolProp\nline number         : 325\nversion             : 3.3 r1808647\n-------------------------------\r\n"
04/06/2018 04:55:35 PM - __name__ - INFO - Display Setup Running
04/06/2018 04:55:35 PM - __name__ - INFO - Starting execution
04/06/2018 04:55:35 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 04:55:35 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 04:55:35 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 04:55:35 PM - __name__ - INFO - Input file : C:\Users\Yajana\PycharmProjects\Distributed-setup-4\Test\Input.yaml
04/06/2018 04:55:35 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 04:55:35 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 04:55:35 PM - __name__ - INFO - 127.0.0.1, 192.168.0.8
04/06/2018 04:55:35 PM - __name__ - INFO - EDIT::127.0.0.1, 192.168.0.8
04/06/2018 04:55:35 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 04:55:35 PM - __name__ - INFO - 192.168.0.8 : Done
04/06/2018 04:55:56 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 0
04/06/2018 04:56:17 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 1
04/06/2018 04:56:38 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 2
04/06/2018 04:56:39 PM - __name__ - WARNING - Unable to Connect to IP : 172.23.1.79
04/06/2018 04:56:40 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 0
04/06/2018 04:56:41 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 1
04/06/2018 04:56:42 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 2
04/06/2018 04:56:42 PM - __name__ - WARNING - Unable to Connect to IP : 192.168.0.7
04/06/2018 04:56:42 PM - __name__ - INFO - IP : ['192.168.0.8', '172.23.1.79', '192.168.0.7']
04/06/2018 04:56:42 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 04:56:42 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 04:56:42 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 04:56:42 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 04:56:42 PM - __name__ - INFO - Script Execution
04/06/2018 04:56:42 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 04:56:42 PM - __name__ - INFO - Execution Parameters : {'url': 'https://app.mammoth.io/#/login', 'iteration': 2, 'browser': 'chrome', 'timeout': 2400, 'concurrency': 2, 'ips': ['192.168.0.8', '172.23.1.79', '192.168.0.7'], 'rampup': 3}
04/06/2018 04:56:42 PM - __name__ - INFO - Starting Execution
04/06/2018 04:56:42 PM - __name__ - INFO - {'mechine': 'AMD64', 'name': uname_result(system='Windows', node='DESKTOP-4HBDBJJ', release='10', version='10.0.16299', machine='AMD64', processor='Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'system': 'Windows', 'platform': 'Windows-10-10.0.16299-SP0', 'version': '10.0.16299', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'}
04/06/2018 04:56:42 PM - __name__ - INFO - Execution Started
04/06/2018 04:56:42 PM - __name__ - INFO - COMMAND:: -r -Gusers=2 -Grampup=3 -Gcount=2 -Gduration=2400 -GUrl=https://app.mammoth.io/#/login
04/06/2018 04:56:42 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 04:56:42 PM - __name__ - INFO - COMMAND:: -r -Gusers=2 -Grampup=3 -Gcount=2 -Gduration=2400 -GUrl=https://app.mammoth.io/#/login
04/06/2018 04:56:42 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 04:56:48 PM - __name__ - INFO - 192.168.0.8 : b"Error in NonGUIDriver java.lang.IllegalArgumentException: Problem loading XML from:'C:\\Users\\Yajana\\PycharmProjects\\Distributed-setup-4\\Distributed-Setup\\Client\\file_received.jmx', missing class com.thoughtworks.xstream.converters.ConversionException: \n---- Debugging information ----\ncause-exception     : com.thoughtworks.xstream.converters.ConversionException\ncause-message       : \nfirst-jmeter-class  : org.apache.jmeter.save.converters.TestElementConverter.unmarshal(TestElementConverter.java:107)\nclass               : org.apache.jmeter.save.ScriptWrapper\nrequired-type       : org.apache.jmeter.testelement.property.BooleanProperty\nconverter-type      : org.apache.jmeter.save.ScriptWrapperConverter\npath                : /jmeterTestPlan/hashTree/WorkBench/boolProp\nline number         : 325\nversion             : 3.3 r1808647\n-------------------------------\r\n"
04/06/2018 04:57:15 PM - __name__ - INFO - Display Setup Running
04/06/2018 04:57:15 PM - __name__ - INFO - Starting execution
04/06/2018 04:57:15 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 04:57:15 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 04:57:15 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 04:57:15 PM - __name__ - INFO - Input file : C:\Users\Yajana\PycharmProjects\Distributed-setup-4\Test\Input.yaml
04/06/2018 04:57:15 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 04:57:16 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 0
04/06/2018 04:57:17 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 1
04/06/2018 04:57:18 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 2
04/06/2018 04:57:18 PM - __name__ - WARNING - Unable to Connect to IP : 192.168.0.7
04/06/2018 04:57:18 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 04:57:18 PM - __name__ - INFO - 127.0.0.1, 192.168.0.8
04/06/2018 04:57:18 PM - __name__ - INFO - EDIT::127.0.0.1, 192.168.0.8
04/06/2018 04:57:18 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 04:57:18 PM - __name__ - INFO - 192.168.0.8 : Done
04/06/2018 04:57:39 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 0
04/06/2018 04:58:00 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 1
04/06/2018 04:58:22 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 2
04/06/2018 04:58:22 PM - __name__ - WARNING - Unable to Connect to IP : 172.23.1.79
04/06/2018 04:58:22 PM - __name__ - INFO - IP : ['192.168.0.7', '192.168.0.8', '172.23.1.79']
04/06/2018 04:58:22 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 04:58:22 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 04:58:22 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 04:58:22 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 04:58:22 PM - __name__ - INFO - Script Execution
04/06/2018 04:58:22 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 04:58:22 PM - __name__ - INFO - Execution Parameters : {'concurrency': 2, 'url': 'https://app.mammoth.io/#/login', 'timeout': 2400, 'ips': ['192.168.0.7', '192.168.0.8', '172.23.1.79'], 'rampup': 3, 'browser': 'chrome', 'iteration': 2}
04/06/2018 04:58:22 PM - __name__ - INFO - Starting Execution
04/06/2018 04:58:22 PM - __name__ - INFO - {'mechine': 'AMD64', 'version': '10.0.16299', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel', 'system': 'Windows', 'platform': 'Windows-10-10.0.16299-SP0', 'name': uname_result(system='Windows', node='DESKTOP-4HBDBJJ', release='10', version='10.0.16299', machine='AMD64', processor='Intel64 Family 6 Model 158 Stepping 9, GenuineIntel')}
04/06/2018 04:58:22 PM - __name__ - INFO - Execution Started
04/06/2018 04:58:22 PM - __name__ - INFO - COMMAND:: -r -Gusers=2 -Grampup=3 -Gcount=2 -Gduration=2400 -GUrl=https://app.mammoth.io/#/login
04/06/2018 04:58:22 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 04:58:22 PM - __name__ - INFO - COMMAND:: -r -Gusers=2 -Grampup=3 -Gcount=2 -Gduration=2400 -GUrl=https://app.mammoth.io/#/login
04/06/2018 04:58:22 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 04:58:27 PM - __name__ - INFO - 192.168.0.8 : b"Error in NonGUIDriver java.lang.IllegalArgumentException: Problem loading XML from:'C:\\Users\\Yajana\\PycharmProjects\\Distributed-setup-4\\Distributed-Setup\\Client\\file_received.jmx', missing class com.thoughtworks.xstream.converters.ConversionException: \n---- Debugging information ----\ncause-exception     : com.thoughtworks.xstream.converters.ConversionException\ncause-message       : \nfirst-jmeter-class  : org.apache.jmeter.save.converters.TestElementConverter.unmarshal(TestElementConverter.java:107)\nclass               : org.apache.jmeter.save.ScriptWrapper\nrequired-type       : org.apache.jmeter.testelement.property.BooleanProperty\nconverter-type      : org.apache.jmeter.save.ScriptWrapperConverter\npath                : /jmeterTestPlan/hashTree/WorkBench/boolProp\nline number         : 325\nversion             : 3.3 r1808647\n-------------------------------\r\n"
04/06/2018 05:17:10 PM - __name__ - INFO - Display Setup Running
04/06/2018 05:17:10 PM - __name__ - INFO - Starting execution
04/06/2018 05:17:10 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 05:17:10 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 05:17:10 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 05:17:10 PM - __name__ - INFO - Input file : C:\Users\Yajana\PycharmProjects\Distributed-setup-4\Test\Input.yaml
04/06/2018 05:17:10 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 05:17:11 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 0
04/06/2018 05:17:12 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 1
04/06/2018 05:17:14 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 2
04/06/2018 05:17:14 PM - __name__ - WARNING - Unable to Connect to IP : 192.168.0.7
04/06/2018 05:17:14 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 05:17:14 PM - __name__ - INFO - 127.0.0.1, 192.168.0.8
04/06/2018 05:17:14 PM - __name__ - INFO - EDIT::127.0.0.1, 192.168.0.8
04/06/2018 05:17:14 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 05:17:14 PM - __name__ - INFO - 192.168.0.8: Done
04/06/2018 05:17:35 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 0
04/06/2018 05:17:56 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 1
04/06/2018 05:18:17 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 2
04/06/2018 05:18:17 PM - __name__ - WARNING - Unable to Connect to IP : 172.23.1.79
04/06/2018 05:18:17 PM - __name__ - INFO - IP : ['192.168.0.7', '192.168.0.8', '172.23.1.79']
04/06/2018 05:18:17 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 05:18:17 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 05:18:17 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 05:18:17 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 05:18:17 PM - __name__ - INFO - Script Execution
04/06/2018 05:18:17 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 05:18:17 PM - __name__ - INFO - Execution Parameters : {'ips': ['192.168.0.7', '192.168.0.8', '172.23.1.79'], 'timeout': 2400, 'concurrency': 2, 'iteration': 2, 'url': 'https://app.mammoth.io/#/login', 'rampup': 3, 'browser': 'chrome'}
04/06/2018 05:18:17 PM - __name__ - INFO - Starting Execution
04/06/2018 05:18:17 PM - __name__ - INFO - {'version': '10.0.16299', 'mechine': 'AMD64', 'system': 'Windows', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel', 'platform': 'Windows-10-10.0.16299-SP0', 'name': uname_result(system='Windows', node='DESKTOP-4HBDBJJ', release='10', version='10.0.16299', machine='AMD64', processor='Intel64 Family 6 Model 158 Stepping 9, GenuineIntel')}
04/06/2018 05:18:17 PM - __name__ - INFO - Execution Started
04/06/2018 05:18:17 PM - __name__ - INFO - COMMAND:: -r -Gusers=2 -Grampup=3 -Gcount=2 -Gduration=2400 -GUrl=https://app.mammoth.io/#/login
04/06/2018 05:18:17 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 05:18:17 PM - __name__ - INFO - COMMAND:: -r -Gusers=2 -Grampup=3 -Gcount=2 -Gduration=2400 -GUrl=https://app.mammoth.io/#/login
04/06/2018 05:18:17 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 05:18:23 PM - __name__ - INFO - 192.168.0.8: b"Error in NonGUIDriver java.lang.IllegalArgumentException: Problem loading XML from:'C:\\Users\\Yajana\\PycharmProjects\\Distributed-setup-4\\Distributed-Setup\\Client\\file_received.jmx', missing class com.thoughtworks.xstream.converters.ConversionException: \n---- Debugging information ----\ncause-exception     : com.thoughtworks.xstream.converters.ConversionException\ncause-message       : \nfirst-jmeter-class  : org.apache.jmeter.save.converters.TestElementConverter.unmarshal(TestElementConverter.java:107)\nclass               : org.apache.jmeter.save.ScriptWrapper\nrequired-type       : org.apache.jmeter.testelement.property.BooleanProperty\nconverter-type      : org.apache.jmeter.save.ScriptWrapperConverter\npath                : /jmeterTestPlan/hashTree/WorkBench/boolProp\nline number         : 325\nversion             : 3.3 r1808647\n-------------------------------\r\n"
04/06/2018 05:19:24 PM - __name__ - INFO - Display Setup Running
04/06/2018 05:19:25 PM - __name__ - INFO - Starting execution
04/06/2018 05:19:25 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 05:19:25 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 05:19:25 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 05:19:25 PM - __name__ - INFO - Input file : C:\Users\Yajana\PycharmProjects\Distributed-setup-4\Test\Input.yaml
04/06/2018 05:19:25 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 05:19:25 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 05:19:25 PM - __name__ - INFO - 127.0.0.1, 192.168.0.8
04/06/2018 05:19:25 PM - __name__ - INFO - EDIT::127.0.0.1, 192.168.0.8
04/06/2018 05:19:25 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 05:19:25 PM - __name__ - INFO - 192.168.0.8: Done
04/06/2018 05:19:46 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 0
04/06/2018 05:20:07 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 1
04/06/2018 05:20:28 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 2
04/06/2018 05:20:28 PM - __name__ - WARNING - Unable to Connect to IP : 172.23.1.79
04/06/2018 05:20:29 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 0
04/06/2018 05:20:30 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 1
04/06/2018 05:20:31 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 2
04/06/2018 05:20:31 PM - __name__ - WARNING - Unable to Connect to IP : 192.168.0.7
04/06/2018 05:20:31 PM - __name__ - INFO - IP : ['192.168.0.8', '172.23.1.79', '192.168.0.7']
04/06/2018 05:20:31 PM - __name__ - INFO - <?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>
        <longProp name="ThreadGroup.start_time">1513426486000</longProp>
        <longProp name="ThreadGroup.end_time">2554805686000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">
          <stringProp name="propFilePath">C:\Users\Administrator\Documents\apache-jmeter-3.3\bin\Inputdatas.properties</stringProp>
          <stringProp name="TestPlan.comments">C:\Users\Deepak\Documents\apache-jmeter-3.3\apache-jmeter-3.3\bin\Inputdatas.properties</stringProp>
        </com.tag.jmeter.ext.config.PropertyReader>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host"></stringProp>
            <intProp name="WebDriverConfig.http_port">8080</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>
            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;
import org.openqa.selenium;&#xd;
import java.time.temporal.ChronoUnit;&#xd;
import java.time.format.DateTimeFormatter;  &#xd;
import java.time.LocalDateTime;   &#xd;
import org.openqa.selenium.WebElement;&#xd;
import org.openqa.selenium.By;&#xd;
import java.io.IOException;&#xd;
import org.apache.commons.io.FileUtils;&#xd;
import org.openqa.selenium.OutputType;&#xd;
import org.openqa.selenium.TakesScreenshot;&#xd;
import org.openqa.selenium.WebDriver;&#xd;
import java.net.InetAddress;&#xd;
import java.net.UnknownHostException;&#xd;
import java.util.concurrent.TimeUnit;&#xd;
import org.openqa.selenium.support.ui.WebDriverWait;&#xd;
import org.openqa.selenium.support.ui.ExpectedConditions;&#xd;
&#xd;
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;
WebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;
vars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;
vars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;
vars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;
vars.put(&quot;login&quot;,&quot;0&quot;);&#xd;
vars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;
vars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;
WDS.sampleResult.sampleStart();&#xd;
//Script Starts from here&#xd;
vars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;
&#xd;
//Launcing application&#xd;
WDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;
WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;
//application login process&#xd;
try{&#xd;
//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;
//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;
wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;
wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;
login=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;
startlogin=LocalDateTime.now();&#xd;
login.click();&#xd;
&#xd;
//Overlay starts now&#xd;
TEN_SECONDS=60*1000;&#xd;
WDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;
oldTime=LocalDateTime.now();&#xd;
start=LocalDateTime.now();&#xd;
try{&#xd;
	while(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;
    	WDS.log.info(&quot;overlay is there&quot;);	&#xd;
    	Long minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;
    	if(minutesBetween&gt;TEN_SECONDS){&#xd;
        	WDS.browser.navigate().refresh();&#xd;
		WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;
        	oldTimeAfterRefresh=LocalDateTime.now();&#xd;
        //again find overlay after refreshing&#xd;
        	try{&#xd;
        		while(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;
        		Long minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;
        		if(minutesBetween&gt;TEN_SECONDS){&#xd;
        		break outerloop;&#xd;
        	}&#xd;
                else {&#xd;
                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;
                     }&#xd;
                  }&#xd;
               }&#xd;
            catch(Exception e){&#xd;
                //when there is no overlay in test&#xd;
            	WDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);	&#xd;
            	end=LocalDateTime.now();&#xd;
            	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
            	vars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;
            	Long minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;
            	vars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;
            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;
        	WDS.log.info(vars.get(&quot;login&quot;));&#xd;
        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;
                            }&#xd;
                   }&#xd;
               }&#xd;
    //Overlay got invisible now&#xd;
    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;
	end=LocalDateTime.now();&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
	vars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;
	vars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;
	WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;
    WDS.log.info(vars.get(&quot;login&quot;));&#xd;
}&#xd;
catch(Exception e){&#xd;
    //There is no overlay found&#xd;
	WDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;
	end=LocalDateTime.now();&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
	vars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;
	Long minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;
	vars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;
    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;
    WDS.log.info(vars.get(&quot;login&quot;));&#xd;
	break outerloop;&#xd;
	}&#xd;
finally{&#xd;
    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;
    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;
&#xd;
WDS.sampleResult.sampleEnd();&#xd;
}&#xd;
&#xd;
}catch(Exception e)&#xd;
{&#xd;
    //log.info(&quot;Exception is : &quot; +e);&#xd;
    try {&#xd;
           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;
           ip= String.valueOf(ipAddr.getHostAddress());&#xd;
            } catch (UnknownHostException ex) {&#xd;
                ex.printStackTrace();&#xd;
            }&#xd;
    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;
    try {&#xd;
     // now copy the  screenshot to desired location using copyFile //method&#xd;
        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;
    }&#xd;
    catch (IOException e)&#xd;
     {&#xd;
       WDS.log.info(&quot;something wrong&quot;);&#xd;
     }&#xd;
 }</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">beanshell</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;
import org.openqa.selenium;&#xd;
import java.time.temporal.ChronoUnit;&#xd;
import java.time.format.DateTimeFormatter;  &#xd;
import java.time.LocalDateTime;   &#xd;
import org.openqa.selenium.WebElement;&#xd;
import org.openqa.selenium.By;&#xd;
import org.apache.commons.io.FileUtils;&#xd;
import org.openqa.selenium.OutputType;&#xd;
import org.openqa.selenium.TakesScreenshot;&#xd;
import java.io.FileWriter;&#xd;
import java.util.concurrent.TimeUnit;&#xd;
import org.openqa.selenium.support.ui.WebDriverWait;&#xd;
import org.openqa.selenium.support.ui.ExpectedConditions;&#xd;
&#xd;
&#xd;
WebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;
WDS.sampleResult.sampleStart();&#xd;
var vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;
&#xd;
try{&#xd;
     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;
     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;
    try{&#xd;
        try{&#xd;
           //Checking for the invisibility of blanck page if there are no data in the application&#xd;
                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;
        }catch(Exception e){&#xd;
            //If There is no data in the application uploading a new file.&#xd;
            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;
            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;
            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;
                start=LocalDateTime.now();&#xd;
                Tread.sleep(5000);&#xd;
                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;
                &#xd;
                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;
                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;
                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;
                WDS.log.info(filelocation);&#xd;
                file1.sendKeys(new String[] {filelocation});&#xd;
            }&#xd;
        }&#xd;
    }catch(Exception e)  &#xd;
    {      try {&#xd;
           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;
           ip= String.valueOf(ipAddr.getHostAddress());&#xd;
            } catch (UnknownHostException ex) {&#xd;
                ex.printStackTrace();&#xd;
            }&#xd;
    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;
    try {&#xd;
     // now copy the  screenshot to desired location using copyFile //method&#xd;
        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;
    }&#xd;
    catch (IOException e)&#xd;
     {&#xd;
       WDS.log.info(&quot;something wrong&quot;);&#xd;
     }&#xd;
    }&#xd;
    try{&#xd;
        //User is trying to logout from the application&#xd;
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;
        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;
        start=LocalDateTime.now();&#xd;
        logout.click();&#xd;
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;
        end=LocalDateTime.now();&#xd;
        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;
        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;
        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;
    }&#xd;
    catch(Exception e)&#xd;
    {&#xd;
    WDS.log.info(&quot;Not logged out&quot;);&#xd;
    }&#xd;
}catch(Exception e)&#xd;
{&#xd;
    //log.info(&quot;Exception is : &quot; +e);&#xd;
    try {&#xd;
           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;
           ip= String.valueOf(ipAddr.getHostAddress());&#xd;
            } catch (UnknownHostException ex) {&#xd;
                ex.printStackTrace();&#xd;
            }&#xd;
    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;
    try {&#xd;
     // now copy the  screenshot to desired location using copyFile //method&#xd;
        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;
    }&#xd;
    catch (IOException e)&#xd;
     {&#xd;
       WDS.log.info(&quot;something wrong&quot;);&#xd;
     }&#xd;
 }&#xd;
 finally{&#xd;
        try {&#xd;
           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;
          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;
&#xd;
            } catch (UnknownHostException ex) {&#xd;
                ex.printStackTrace();&#xd;
            }&#xd;
    EndTime=LocalDateTime.now();&#xd;
    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;
    p = new PrintStream(f);&#xd;
    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;
    WDS.sampleResult.sampleEnd();&#xd;
    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;
    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;
    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;
    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;
    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;
    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;
    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;
    p.close();&#xd;
 }</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">beanshell</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>

04/06/2018 05:20:31 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 05:33:39 PM - __name__ - INFO - Display Setup Running
04/06/2018 05:33:39 PM - __name__ - INFO - Starting execution
04/06/2018 05:33:39 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 05:33:39 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 05:33:39 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 05:33:39 PM - __name__ - WARNING - No Input file given, trying to execute default Input file
04/06/2018 05:33:39 PM - __name__ - INFO - Input file : C:\Distributed-setup\scale_up_infra/Input/Input.yaml
04/06/2018 05:33:39 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 05:34:41 PM - __name__ - INFO - Display Setup Running
04/06/2018 05:34:41 PM - __name__ - INFO - Starting execution
04/06/2018 05:34:41 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 05:34:41 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 05:34:41 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 05:34:41 PM - __name__ - WARNING - No Input file given, trying to execute default Input file
04/06/2018 05:34:41 PM - __name__ - INFO - Input file : C:\Distributed-setup\scale_up_infra/Input/Input.yaml
04/06/2018 05:34:41 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 05:34:41 PM - __name__ - INFO - Script Execution
04/06/2018 05:34:41 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 05:34:41 PM - __name__ - INFO - Execution Parameters : {'rampup': 0, 'concurrency': 1, 'timeout': 2400, 'url': 'https://develop.mammoth.io/#/login', 'iteration': 2, 'browser': 'chrome'}
04/06/2018 05:34:41 PM - __name__ - INFO - Starting Execution
04/06/2018 05:34:41 PM - __name__ - INFO - {'name': ('Windows', 'DESKTOP-4HBDBJJ', '10', '10.0.16299', 'AMD64', 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'mechine': 'AMD64', 'system': 'Windows', 'platform': 'Windows-10-10.0.16299', 'version': '10.0.16299', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'}
04/06/2018 05:34:41 PM - __name__ - INFO - Starting JMeter
04/06/2018 05:36:10 PM - __name__ - INFO - Display Setup Running
04/06/2018 05:36:10 PM - __name__ - INFO - Starting execution
04/06/2018 05:36:10 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 05:36:10 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 05:36:10 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 05:36:10 PM - __name__ - WARNING - No Input file given, trying to execute default Input file
04/06/2018 05:36:10 PM - __name__ - INFO - Input file : C:\Distributed-setup\scale_up_infra/Input/Input.yaml
04/06/2018 05:36:10 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 05:36:10 PM - __name__ - INFO - Script Execution
04/06/2018 05:36:10 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 05:36:10 PM - __name__ - INFO - Execution Parameters : {'rampup': 0, 'concurrency': 1, 'timeout': 2400, 'url': 'https://develop.mammoth.io/#/login', 'iteration': 2, 'browser': 'chrome'}
04/06/2018 05:36:10 PM - __name__ - INFO - Starting Execution
04/06/2018 05:36:10 PM - __name__ - INFO - {'name': ('Windows', 'DESKTOP-4HBDBJJ', '10', '10.0.16299', 'AMD64', 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'mechine': 'AMD64', 'system': 'Windows', 'platform': 'Windows-10-10.0.16299', 'version': '10.0.16299', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'}
04/06/2018 05:36:10 PM - __name__ - INFO - Starting JMeter
04/06/2018 05:36:37 PM - __name__ - INFO - Execution Complete
04/06/2018 05:38:08 PM - __name__ - INFO - Execution Complete
04/06/2018 05:38:29 PM - __name__ - INFO - Display Setup Running
04/06/2018 05:38:29 PM - __name__ - INFO - Starting execution
04/06/2018 05:38:29 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 05:38:29 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 05:38:29 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 05:38:29 PM - __name__ - WARNING - No Input file given, trying to execute default Input file
04/06/2018 05:38:29 PM - __name__ - INFO - Input file : C:\Distributed-setup\scale_up_infra/Input/Input.yaml
04/06/2018 05:38:29 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 05:38:29 PM - __name__ - INFO - Script Execution
04/06/2018 05:38:29 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 05:38:29 PM - __name__ - INFO - Execution Parameters : {'rampup': 0, 'concurrency': 1, 'timeout': 2400, 'url': 'https://develop.mammoth.io/#/login', 'iteration': 2, 'browser': 'chrome'}
04/06/2018 05:38:29 PM - __name__ - INFO - Starting Execution
04/06/2018 05:38:29 PM - __name__ - INFO - {'name': ('Windows', 'DESKTOP-4HBDBJJ', '10', '10.0.16299', 'AMD64', 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'mechine': 'AMD64', 'system': 'Windows', 'platform': 'Windows-10-10.0.16299', 'version': '10.0.16299', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'}
04/06/2018 05:38:29 PM - __name__ - INFO - Starting JMeter
04/06/2018 05:38:44 PM - __name__ - INFO - Execution Complete
04/06/2018 05:39:34 PM - __name__ - INFO - Display Setup Running
04/06/2018 05:39:34 PM - __name__ - INFO - Starting execution
04/06/2018 05:39:34 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 05:39:34 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 05:39:34 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 05:39:34 PM - __name__ - WARNING - No Input file given, trying to execute default Input file
04/06/2018 05:39:34 PM - __name__ - INFO - Input file : C:\Distributed-setup\scale_up_infra/Input/Input.yaml
04/06/2018 05:39:34 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 05:39:34 PM - __name__ - INFO - Script Execution
04/06/2018 05:39:34 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 05:39:34 PM - __name__ - INFO - Execution Parameters : {'rampup': 0, 'concurrency': 1, 'timeout': 2400, 'url': 'https://develop.mammoth.io/#/login', 'iteration': 2, 'browser': 'chrome'}
04/06/2018 05:39:34 PM - __name__ - INFO - Starting Execution
04/06/2018 05:39:34 PM - __name__ - INFO - {'name': ('Windows', 'DESKTOP-4HBDBJJ', '10', '10.0.16299', 'AMD64', 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'mechine': 'AMD64', 'system': 'Windows', 'platform': 'Windows-10-10.0.16299', 'version': '10.0.16299', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'}
04/06/2018 05:39:34 PM - __name__ - INFO - Starting JMeter
04/06/2018 05:41:55 PM - __name__ - INFO - Execution Complete
04/06/2018 05:49:31 PM - __name__ - INFO - Display Setup Running
04/06/2018 05:49:31 PM - __name__ - INFO - Starting execution
04/06/2018 05:49:31 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 05:49:31 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 05:49:31 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 05:49:31 PM - __name__ - INFO - Input file : C:\Users\Yajana\PycharmProjects\Distributed-setup-4\Test\Input.yaml
04/06/2018 05:49:31 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 05:49:32 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 0
04/06/2018 05:49:33 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 1
04/06/2018 05:49:34 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 2
04/06/2018 05:49:35 PM - __name__ - ERROR - Unable to Connect to IP : 192.168.0.7
04/06/2018 05:50:04 PM - __name__ - INFO - Display Setup Running
04/06/2018 05:50:04 PM - __name__ - INFO - Starting execution
04/06/2018 05:50:04 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 05:50:04 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 05:50:04 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 05:50:04 PM - __name__ - INFO - Input file : C:\Users\Yajana\PycharmProjects\Distributed-setup-4\Test\Input.yaml
04/06/2018 05:50:04 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 05:50:05 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 0
04/06/2018 05:50:07 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 1
04/06/2018 05:50:08 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 2
04/06/2018 05:50:08 PM - __name__ - ERROR - Unable to Connect to IP : 192.168.0.7
04/06/2018 05:50:08 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 05:50:08 PM - __name__ - INFO - 127.0.0.1, 192.168.0.8
04/06/2018 05:50:08 PM - __name__ - INFO - EDIT::127.0.0.1, 192.168.0.8
04/06/2018 05:50:08 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 05:50:08 PM - __name__ - INFO - 192.168.0.8: Done
04/06/2018 05:50:29 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 0
04/06/2018 05:50:50 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 1
04/06/2018 05:51:11 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 2
04/06/2018 05:51:11 PM - __name__ - ERROR - Unable to Connect to IP : 172.23.1.79
04/06/2018 05:51:11 PM - __name__ - INFO - IP : ['192.168.0.7', '192.168.0.8', '172.23.1.79']
04/06/2018 05:51:11 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 05:51:11 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 05:51:11 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 05:51:11 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 05:51:11 PM - __name__ - INFO - Script Execution
04/06/2018 05:51:11 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 05:51:11 PM - __name__ - INFO - Execution Parameters : {'rampup': 3, 'concurrency': 2, 'browser': 'chrome', 'iteration': 2, 'timeout': 2400, 'url': 'https://app.mammoth.io/#/login', 'ips': ['192.168.0.7', '192.168.0.8', '172.23.1.79']}
04/06/2018 05:51:11 PM - __name__ - INFO - Starting Execution
04/06/2018 05:51:11 PM - __name__ - INFO - {'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel', 'name': uname_result(system='Windows', node='DESKTOP-4HBDBJJ', release='10', version='10.0.16299', machine='AMD64', processor='Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'mechine': 'AMD64', 'system': 'Windows', 'platform': 'Windows-10-10.0.16299-SP0', 'version': '10.0.16299'}
04/06/2018 05:51:11 PM - __name__ - INFO - Execution Started
04/06/2018 05:51:11 PM - __name__ - INFO - COMMAND:: -r -Gusers=2 -Grampup=3 -Gcount=2 -Gduration=2400 -GUrl=https://app.mammoth.io/#/login
04/06/2018 05:51:11 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 05:51:11 PM - __name__ - INFO - COMMAND:: -r -Gusers=2 -Grampup=3 -Gcount=2 -Gduration=2400 -GUrl=https://app.mammoth.io/#/login
04/06/2018 05:51:11 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 05:51:17 PM - __name__ - INFO - 192.168.0.8: b"Error in NonGUIDriver java.lang.IllegalArgumentException: Problem loading XML from:'C:\\Users\\Yajana\\PycharmProjects\\Distributed-setup-4\\Distributed-Setup\\Client\\file_received.jmx', missing class com.thoughtworks.xstream.converters.ConversionException: \n---- Debugging information ----\ncause-exception     : com.thoughtworks.xstream.converters.ConversionException\ncause-message       : \nfirst-jmeter-class  : org.apache.jmeter.save.converters.TestElementConverter.unmarshal(TestElementConverter.java:107)\nclass               : org.apache.jmeter.save.ScriptWrapper\nrequired-type       : org.apache.jmeter.testelement.property.BooleanProperty\nconverter-type      : org.apache.jmeter.save.ScriptWrapperConverter\npath                : /jmeterTestPlan/hashTree/WorkBench/boolProp\nline number         : 325\nversion             : 3.3 r1808647\n-------------------------------\r\n"
04/06/2018 05:51:24 PM - __name__ - INFO - Display Setup Running
04/06/2018 05:51:24 PM - __name__ - INFO - Starting execution
04/06/2018 05:51:24 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 05:51:24 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 05:51:24 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 05:51:24 PM - __name__ - WARNING - No Input file given, trying to execute default Input file
04/06/2018 05:51:24 PM - __name__ - INFO - Input file : C:\Distributed-setup\scale_up_infra/Input/Input.yaml
04/06/2018 05:51:24 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 05:51:24 PM - __name__ - INFO - Script Execution
04/06/2018 05:51:24 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 05:51:24 PM - __name__ - INFO - Execution Parameters : {'rampup': 0, 'iteration': 2, 'timeout': 2400, 'browser': 'chrome', 'concurrency': 1, 'url': 'https://develop.mammoth.io/#/login'}
04/06/2018 05:51:24 PM - __name__ - INFO - Starting Execution
04/06/2018 05:51:24 PM - __name__ - INFO - {'mechine': 'AMD64', 'system': 'Windows', 'platform': 'Windows-10-10.0.16299-SP0', 'version': '10.0.16299', 'name': uname_result(system='Windows', node='DESKTOP-4HBDBJJ', release='10', version='10.0.16299', machine='AMD64', processor='Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'}
04/06/2018 05:51:24 PM - __name__ - INFO - Starting JMeter
04/06/2018 05:52:15 PM - __name__ - INFO - Execution Complete
04/06/2018 05:52:37 PM - __name__ - INFO - Display Setup Running
04/06/2018 05:52:37 PM - __name__ - INFO - Starting execution
04/06/2018 05:52:37 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 05:52:37 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 05:52:37 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 05:52:37 PM - __name__ - WARNING - No Input file given, trying to execute default Input file
04/06/2018 05:52:37 PM - __name__ - INFO - Input file : C:\Distributed-setup\scale_up_infra/Input/Input.yaml
04/06/2018 05:52:37 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 05:52:37 PM - __name__ - INFO - Script Execution
04/06/2018 05:52:37 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 05:52:37 PM - __name__ - INFO - Execution Parameters : {'concurrency': 1, 'timeout': 2400, 'url': 'https://develop.mammoth.io/#/login', 'rampup': 0, 'browser': 'chrome', 'iteration': 2}
04/06/2018 05:52:37 PM - __name__ - INFO - Starting Execution
04/06/2018 05:52:37 PM - __name__ - INFO - {'version': '10.0.16299', 'mechine': 'AMD64', 'name': uname_result(system='Windows', node='DESKTOP-4HBDBJJ', release='10', version='10.0.16299', machine='AMD64', processor='Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'platform': 'Windows-10-10.0.16299-SP0', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel', 'system': 'Windows'}
04/06/2018 05:52:37 PM - __name__ - INFO - Starting JMeter
04/06/2018 05:53:49 PM - __name__ - INFO - Display Setup Running
04/06/2018 05:53:49 PM - __name__ - INFO - Starting execution
04/06/2018 05:53:49 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 05:53:49 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 05:53:49 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 05:53:49 PM - __name__ - WARNING - No Input file given, trying to execute default Input file
04/06/2018 05:53:49 PM - __name__ - INFO - Input file : C:\Distributed-setup\scale_up_infra/Input/Input.yaml
04/06/2018 05:53:49 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 05:53:49 PM - __name__ - INFO - Script Execution
04/06/2018 05:53:49 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 05:53:49 PM - __name__ - INFO - Execution Parameters : {'rampup': 0, 'concurrency': 1, 'timeout': 2400, 'url': 'https://develop.mammoth.io/#/login', 'iteration': 2, 'browser': 'chrome'}
04/06/2018 05:53:49 PM - __name__ - INFO - Starting Execution
04/06/2018 05:53:49 PM - __name__ - INFO - {'name': ('Windows', 'DESKTOP-4HBDBJJ', '10', '10.0.16299', 'AMD64', 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'mechine': 'AMD64', 'system': 'Windows', 'platform': 'Windows-10-10.0.16299', 'version': '10.0.16299', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'}
04/06/2018 05:53:49 PM - __name__ - INFO - Starting JMeter
04/06/2018 05:57:25 PM - __name__ - INFO - Display Setup Running
04/06/2018 05:57:25 PM - __name__ - INFO - Starting execution
04/06/2018 05:57:25 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 05:57:25 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 05:57:25 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 05:57:25 PM - __name__ - WARNING - No Input file given, trying to execute default Input file
04/06/2018 05:57:25 PM - __name__ - INFO - Input file : C:\Distributed-setup\scale_up_infra/Input/Input.yaml
04/06/2018 05:57:25 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 05:57:25 PM - __name__ - INFO - Script Execution
04/06/2018 05:57:25 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 05:57:25 PM - __name__ - INFO - Execution Parameters : {'browser': 'chrome', 'iteration': 2, 'timeout': 2400, 'concurrency': 1, 'rampup': 0, 'url': 'https://develop.mammoth.io/#/login'}
04/06/2018 05:57:25 PM - __name__ - INFO - Starting Execution
04/06/2018 05:57:25 PM - __name__ - INFO - {'version': '10.0.16299', 'name': uname_result(system='Windows', node='DESKTOP-4HBDBJJ', release='10', version='10.0.16299', machine='AMD64', processor='Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel', 'system': 'Windows', 'mechine': 'AMD64', 'platform': 'Windows-10-10.0.16299-SP0'}
04/06/2018 05:57:25 PM - __name__ - INFO - Starting JMeter
04/06/2018 05:57:59 PM - __name__ - INFO - Display Setup Running
04/06/2018 05:57:59 PM - __name__ - INFO - Starting execution
04/06/2018 05:57:59 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 05:57:59 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 05:57:59 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 05:57:59 PM - __name__ - WARNING - No Input file given, trying to execute default Input file
04/06/2018 05:57:59 PM - __name__ - INFO - Input file : C:\Distributed-setup\scale_up_infra/Input/Input.yaml
04/06/2018 05:57:59 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 05:57:59 PM - __name__ - INFO - Script Execution
04/06/2018 05:57:59 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 05:57:59 PM - __name__ - INFO - Execution Parameters : {'rampup': 0, 'concurrency': 1, 'timeout': 2400, 'url': 'https://develop.mammoth.io/#/login', 'iteration': 2, 'browser': 'chrome'}
04/06/2018 05:57:59 PM - __name__ - INFO - Starting Execution
04/06/2018 05:57:59 PM - __name__ - INFO - {'name': ('Windows', 'DESKTOP-4HBDBJJ', '10', '10.0.16299', 'AMD64', 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'mechine': 'AMD64', 'system': 'Windows', 'platform': 'Windows-10-10.0.16299', 'version': '10.0.16299', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'}
04/06/2018 05:57:59 PM - __name__ - INFO - Starting JMeter
04/06/2018 06:14:46 PM - __name__ - INFO - Display Setup Running
04/06/2018 06:14:46 PM - __name__ - INFO - Starting execution
04/06/2018 06:14:46 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 06:14:46 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 06:14:46 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 06:14:46 PM - __name__ - WARNING - No Input file given, trying to execute default Input file
04/06/2018 06:14:46 PM - __name__ - INFO - Input file : C:\Distributed-setup\scale_up_infra/Input/Input.yaml
04/06/2018 06:14:46 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 06:14:46 PM - __name__ - INFO - Script Execution
04/06/2018 06:14:46 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 06:14:46 PM - __name__ - INFO - Execution Parameters : {'concurrency': 1, 'browser': 'chrome', 'rampup': 0, 'url': 'https://develop.mammoth.io/#/login', 'timeout': 2400, 'iteration': 2}
04/06/2018 06:14:46 PM - __name__ - INFO - Starting Execution
04/06/2018 06:14:46 PM - __name__ - INFO - {'version': '10.0.16299', 'system': 'Windows', 'mechine': 'AMD64', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel', 'platform': 'Windows-10-10.0.16299-SP0', 'name': uname_result(system='Windows', node='DESKTOP-4HBDBJJ', release='10', version='10.0.16299', machine='AMD64', processor='Intel64 Family 6 Model 158 Stepping 9, GenuineIntel')}
04/06/2018 06:14:46 PM - __name__ - INFO - Starting JMeter
04/06/2018 06:15:31 PM - __name__ - INFO - Display Setup Running
04/06/2018 06:15:31 PM - __name__ - INFO - Starting execution
04/06/2018 06:15:31 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 06:15:31 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 06:15:31 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 06:15:31 PM - __name__ - WARNING - No Input file given, trying to execute default Input file
04/06/2018 06:15:31 PM - __name__ - INFO - Input file : C:\Distributed-setup\scale_up_infra/Input/Input.yaml
04/06/2018 06:15:31 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 06:15:31 PM - __name__ - INFO - Script Execution
04/06/2018 06:15:31 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 06:15:31 PM - __name__ - INFO - Execution Parameters : {'rampup': 0, 'concurrency': 1, 'timeout': 2400, 'url': 'https://develop.mammoth.io/#/login', 'iteration': 2, 'browser': 'chrome'}
04/06/2018 06:15:31 PM - __name__ - INFO - Starting Execution
04/06/2018 06:15:31 PM - __name__ - INFO - {'name': ('Windows', 'DESKTOP-4HBDBJJ', '10', '10.0.16299', 'AMD64', 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'mechine': 'AMD64', 'system': 'Windows', 'platform': 'Windows-10-10.0.16299', 'version': '10.0.16299', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'}
04/06/2018 06:15:31 PM - __name__ - INFO - Starting JMeter
04/06/2018 06:18:34 PM - __name__ - INFO - Display Setup Running
04/06/2018 06:18:34 PM - __name__ - INFO - Starting execution
04/06/2018 06:18:34 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 06:18:34 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 06:18:34 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 06:18:34 PM - __name__ - WARNING - No Input file given, trying to execute default Input file
04/06/2018 06:18:34 PM - __name__ - INFO - Input file : C:\Distributed-setup\scale_up_infra/Input/Input.yaml
04/06/2018 06:18:34 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 06:18:34 PM - __name__ - INFO - Script Execution
04/06/2018 06:18:34 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 06:18:34 PM - __name__ - INFO - Execution Parameters : {'rampup': 0, 'concurrency': 1, 'timeout': 2400, 'url': 'https://develop.mammoth.io/#/login', 'iteration': 2, 'browser': 'chrome'}
04/06/2018 06:18:34 PM - __name__ - INFO - Starting Execution
04/06/2018 06:18:34 PM - __name__ - INFO - {'name': ('Windows', 'DESKTOP-4HBDBJJ', '10', '10.0.16299', 'AMD64', 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'mechine': 'AMD64', 'system': 'Windows', 'platform': 'Windows-10-10.0.16299', 'version': '10.0.16299', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'}
04/06/2018 06:18:34 PM - __name__ - INFO - Starting JMeter
04/06/2018 06:20:32 PM - __name__ - INFO - Display Setup Running
04/06/2018 06:20:32 PM - __name__ - INFO - Starting execution
04/06/2018 06:20:32 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 06:20:32 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 06:20:32 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 06:20:32 PM - __name__ - WARNING - No Input file given, trying to execute default Input file
04/06/2018 06:20:32 PM - __name__ - INFO - Input file : C:\Distributed-setup\scale_up_infra/Input/Input.yaml
04/06/2018 06:20:32 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 06:20:32 PM - __name__ - INFO - Script Execution
04/06/2018 06:20:32 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 06:20:32 PM - __name__ - INFO - Execution Parameters : {'concurrency': 1, 'rampup': 0, 'timeout': 2400, 'iteration': 2, 'browser': 'chrome', 'url': 'https://develop.mammoth.io/#/login'}
04/06/2018 06:20:32 PM - __name__ - INFO - Starting Execution
04/06/2018 06:20:32 PM - __name__ - INFO - {'system': 'Windows', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel', 'name': uname_result(system='Windows', node='DESKTOP-4HBDBJJ', release='10', version='10.0.16299', machine='AMD64', processor='Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'mechine': 'AMD64', 'version': '10.0.16299', 'platform': 'Windows-10-10.0.16299-SP0'}
04/06/2018 06:20:32 PM - __name__ - INFO - Starting JMeter
04/06/2018 06:23:44 PM - __name__ - INFO - Execution Complete
04/06/2018 06:23:59 PM - __name__ - INFO - Display Setup Running
04/06/2018 06:23:59 PM - __name__ - INFO - Starting execution
04/06/2018 06:23:59 PM - __name__ - INFO - Configaration is taken from Default Input file
04/06/2018 06:23:59 PM - __name__ - INFO - JMeter Path : C:\Users\Yajana\apache-jmeter\apache-jmeter-3.3\bin
04/06/2018 06:23:59 PM - __name__ - INFO - Git Repository Path : C:\Distributed-setup\scale_up_infra
04/06/2018 06:23:59 PM - __name__ - INFO - Input file : C:\Users\Yajana\PycharmProjects\Distributed-setup-4\Test\Input.yaml
04/06/2018 06:23:59 PM - __name__ - INFO - ['SanityLogin.jmx']
04/06/2018 06:23:59 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 06:23:59 PM - __name__ - INFO - 127.0.0.1, 192.168.0.8
04/06/2018 06:23:59 PM - __name__ - INFO - EDIT::127.0.0.1, 192.168.0.8
04/06/2018 06:23:59 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 06:23:59 PM - __name__ - INFO - 192.168.0.8: Done
04/06/2018 06:24:00 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 0
04/06/2018 06:24:01 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 1
04/06/2018 06:24:02 PM - __name__ - WARNING - Failed to connect for 192.168.0.7: try 2
04/06/2018 06:24:02 PM - __name__ - ERROR - Unable to Connect to IP : 192.168.0.7
04/06/2018 06:24:23 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 0
04/06/2018 06:24:44 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 1
04/06/2018 06:25:05 PM - __name__ - WARNING - Failed to connect for 172.23.1.79: try 2
04/06/2018 06:25:05 PM - __name__ - ERROR - Unable to Connect to IP : 172.23.1.79
04/06/2018 06:25:05 PM - __name__ - INFO - IP : ['192.168.0.8', '192.168.0.7', '172.23.1.79']
04/06/2018 06:25:05 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 06:25:05 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 06:25:05 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 06:25:05 PM - __name__ - INFO - b'<?xml version="1.0" encoding="UTF-8"?>\n<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">\n  <hashTree>\n    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">\n      <stringProp name="TestPlan.comments"></stringProp>\n      <boolProp name="TestPlan.functional_mode">false</boolProp>\n      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>\n      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">\n        <collectionProp name="Arguments.arguments"/>\n      </elementProp>\n      <stringProp name="TestPlan.user_define_classpath"></stringProp>\n    </TestPlan>\n    <hashTree>\n      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">\n        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>\n        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">\n          <boolProp name="LoopController.continue_forever">false</boolProp>\n          <stringProp name="LoopController.loops">${__P(count,1)}</stringProp>\n        </elementProp>\n        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>\n        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>\n        <longProp name="ThreadGroup.start_time">1513426486000</longProp>\n        <longProp name="ThreadGroup.end_time">2554805686000</longProp>\n        <boolProp name="ThreadGroup.scheduler">true</boolProp>\n        <stringProp name="ThreadGroup.duration">${__P(duration,1200)}</stringProp>\n        <stringProp name="ThreadGroup.delay"></stringProp>\n      </ThreadGroup>\n      <hashTree>\n        <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">\n          <stringProp name="propFilePath">C:\\Users\\Administrator\\Documents\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n          <stringProp name="TestPlan.comments">C:\\Users\\Deepak\\Documents\\apache-jmeter-3.3\\apache-jmeter-3.3\\bin\\Inputdatas.properties</stringProp>\n        </com.tag.jmeter.ext.config.PropertyReader>\n        <hashTree/>\n        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">\n          <boolProp name="TransactionController.includeTimers">false</boolProp>\n          <boolProp name="TransactionController.parent">false</boolProp>\n        </TransactionController>\n        <hashTree>\n          <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">\n            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>\n            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>\n            <stringProp name="WebDriverConfig.http_host"></stringProp>\n            <intProp name="WebDriverConfig.http_port">8080</intProp>\n            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>\n            <stringProp name="WebDriverConfig.https_host"></stringProp>\n            <intProp name="WebDriverConfig.https_port">8080</intProp>\n            <stringProp name="WebDriverConfig.ftp_host"></stringProp>\n            <intProp name="WebDriverConfig.ftp_port">8080</intProp>\n            <stringProp name="WebDriverConfig.socks_host"></stringProp>\n            <intProp name="WebDriverConfig.socks_port">8080</intProp>\n            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>\n            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>\n            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>\n            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>\n            <stringProp name="ChromeDriverConfig.chromedriver_path">chromedriver.exe</stringProp>\n            <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>\n          </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport java.io.IOException;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport org.openqa.selenium.WebDriver;&#xd;\nimport java.net.InetAddress;&#xd;\nimport java.net.UnknownHostException;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nvars.put(&quot;Itr&quot;,String.valueOf(&quot;${__BeanShell(vars.getIteration(),)}&quot;));&#xd;\nvars.put(&quot;usr&quot;,String.valueOf(&quot;${__threadNum}&quot;));&#xd;\nvars.put(&quot;overlay&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;login&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;logout&quot;,&quot;0&quot;);&#xd;\nvars.put(&quot;ip&quot;,&quot;0&quot;);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\n//Script Starts from here&#xd;\nvars.put(&quot;StartTime&quot;,String.valueOf(LocalDateTime.now()));&#xd;\n&#xd;\n//Launcing application&#xd;\nWDS.browser.get(&quot;${__P(Url,http://develop.mammoth.io)}&quot;);&#xd;\nWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n//application login process&#xd;\ntry{&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;${__P(username)}&quot;});&#xd;\n//wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;${__P(password)}&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(uid)}&quot;))).sendKeys(new String[] {&quot;scaledev@mammoth.io&quot;});&#xd;\nwait.until(ExpectedConditions.visibilityOfElementLocated(By.id(&quot;${__P(passid)}&quot;))).sendKeys(new String[] {&quot;blr1hubli2&quot;});&#xd;\nlogin=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(signbuttonid)}&quot;)));&#xd;\nstartlogin=LocalDateTime.now();&#xd;\nlogin.click();&#xd;\n&#xd;\n//Overlay starts now&#xd;\nTEN_SECONDS=60*1000;&#xd;\nWDS.browser.manage().timeouts().implicitlyWait(6, TimeUnit.SECONDS); &#xd;\noldTime=LocalDateTime.now();&#xd;\nstart=LocalDateTime.now();&#xd;\ntry{&#xd;\n\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n    \tWDS.log.info(&quot;overlay is there&quot;);\t&#xd;\n    \tLong minutesBetween=ChronoUnit.MILLIS.between(oldTime,LocalDateTime.now());&#xd;\n    \tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \tWDS.browser.navigate().refresh();&#xd;\n\t\tWDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n        \toldTimeAfterRefresh=LocalDateTime.now();&#xd;\n        //again find overlay after refreshing&#xd;\n        \ttry{&#xd;\n        \t\twhile(WDS.browser.findElement(By.xpath(&quot;//spinner[@class=&apos;html5spinner ng-scope&apos;]&quot;)).isDisplayed()){&#xd;\n        \t\tLong minutesBetween=ChronoUnit.MILLIS.between(oldTimeAfterRefresh,LocalDateTime.now());&#xd;\n        \t\tif(minutesBetween&gt;TEN_SECONDS){&#xd;\n        \t\tbreak outerloop;&#xd;\n        \t}&#xd;\n                else {&#xd;\n                    WDS.log.info(&quot;Overlay is there&quot;);&#xd;\n                     }&#xd;\n                  }&#xd;\n               }&#xd;\n            catch(Exception e){&#xd;\n                //when there is no overlay in test&#xd;\n            \tWDS.log.info(&quot;Exception :Overlay is not present After refreshing&quot;);\t&#xd;\n            \tend=LocalDateTime.now();&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n            \tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n            \tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n            \tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n            WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n        \tWDS.log.info(vars.get(&quot;login&quot;));&#xd;\n        //Overlay is not present on screen but test should mark as fail,as it required browser refresh to work.&#xd;\n                            }&#xd;\n                   }&#xd;\n               }&#xd;\n    //Overlay got invisible now&#xd;\n    WDS.log.info(&quot;Overlay is invisible now&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n\tWDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n}&#xd;\ncatch(Exception e){&#xd;\n    //There is no overlay found&#xd;\n\tWDS.log.info(&quot;Exception :Overlay element id is not present.&quot;);&#xd;\n\tend=LocalDateTime.now();&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n\tvars.put(&quot;overlay&quot;,String.valueOf(minutesBetween));&#xd;\n\tLong minutesBetween=ChronoUnit.MILLIS.between(startlogin,end);&#xd;\n\tvars.put(&quot;login&quot;,String.valueOf(minutesBetween));&#xd;\n    WDS.log.info(vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(vars.get(&quot;login&quot;));&#xd;\n\tbreak outerloop;&#xd;\n\t}&#xd;\nfinally{&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;test&quot;+vars.get(&quot;login&quot;));&#xd;\n&#xd;\nWDS.sampleResult.sampleEnd();&#xd;\n}&#xd;\n&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_login&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">\n            <stringProp name="WebDriverSampler.script">import org.apache.jmeter.services.FileServer;&#xd;\nimport org.openqa.selenium;&#xd;\nimport java.time.temporal.ChronoUnit;&#xd;\nimport java.time.format.DateTimeFormatter;  &#xd;\nimport java.time.LocalDateTime;   &#xd;\nimport org.openqa.selenium.WebElement;&#xd;\nimport org.openqa.selenium.By;&#xd;\nimport org.apache.commons.io.FileUtils;&#xd;\nimport org.openqa.selenium.OutputType;&#xd;\nimport org.openqa.selenium.TakesScreenshot;&#xd;\nimport java.io.FileWriter;&#xd;\nimport java.util.concurrent.TimeUnit;&#xd;\nimport org.openqa.selenium.support.ui.WebDriverWait;&#xd;\nimport org.openqa.selenium.support.ui.ExpectedConditions;&#xd;\n&#xd;\n&#xd;\nWebDriverWait wait= new WebDriverWait(WDS.browser,200);&#xd;\nWDS.sampleResult.sampleStart();&#xd;\nvar vars = org.apache.jmeter.threads.JMeterContextService.getContext().getVariables();&#xd;\n&#xd;\ntry{&#xd;\n     WDS.browser.get(&quot;https://develop.mammoth.io/#/login?disableBrowserWarnings=1&quot;);&#xd;\n     wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;//div/p[@class=&apos;location ng-scope&apos;]&quot;)));&#xd;\n    try{&#xd;\n        try{&#xd;\n           //Checking for the invisibility of blanck page if there are no data in the application&#xd;\n                 wait.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)));&#xd;\n        }catch(Exception e){&#xd;\n            //If There is no data in the application uploading a new file.&#xd;\n            if(WDS.browser.findElement(By.xpath(&quot;//div[@class=&apos;no-data&apos;]&quot;)).isDisplayed()){&#xd;\n            //wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId)}&quot;))).click();&#xd;\n            wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;${__P(addNewFileId,//a[@class=&apos;by-file&apos;])}&quot;))).click();&#xd;\n                start=LocalDateTime.now();&#xd;\n                Tread.sleep(5000);&#xd;\n                file1= WDS.browser.findElement(By.xpath(&quot;${__P(fileUploadButtonId)}&quot;));&#xd;\n                &#xd;\n                WDS.browser.executeScript(&quot;document.querySelector(&apos;.fileSelectHiddenInput&apos;).setAttribute(&apos;style&apos;,display=&apos;block&apos;,&apos;opacity:1; width:10px; height:10px; z-index:100&apos;)&quot;,new Object[] {&quot;&quot;});&#xd;\n                //filelocation=&quot;C:/Users/Deepak/Desktop/MamothPerformanceTest/scale_up_tests-master/test_suites/Test Files/CSVoffice_main.csv&quot;;&#xd;\n                filelocation=java.lang.System.getProperty(&quot;user.dir&quot;) + &quot;/&quot; + &quot;Testfiles/CSVoffice_main.csv&quot;;&#xd;\n                WDS.log.info(filelocation);&#xd;\n                file1.sendKeys(new String[] {filelocation});&#xd;\n            }&#xd;\n        }&#xd;\n    }catch(Exception e)  &#xd;\n    {      try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n    }&#xd;\n    try{&#xd;\n        //User is trying to logout from the application&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(cornerSettingMenu)}&quot;))).click();&#xd;\n        logout=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(logoutButtonId)}&quot;)));&#xd;\n        start=LocalDateTime.now();&#xd;\n        logout.click();&#xd;\n        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(&quot;${__P(loginPage)}&quot;)));&#xd;\n        end=LocalDateTime.now();&#xd;\n        Long minutesBetween=ChronoUnit.MILLIS.between(start,end);&#xd;\n        vars.put(&quot;logout&quot;,String.valueOf(minutesBetween));&#xd;\n        WDS.log.info(vars.get(&quot;logout&quot;));&#xd;\n    }&#xd;\n    catch(Exception e)&#xd;\n    {&#xd;\n    WDS.log.info(&quot;Not logged out&quot;);&#xd;\n    }&#xd;\n}catch(Exception e)&#xd;\n{&#xd;\n    //log.info(&quot;Exception is : &quot; +e);&#xd;\n    try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n           ip= String.valueOf(ipAddr.getHostAddress());&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    File src= ((TakesScreenshot)WDS.browser).getScreenshotAs(OutputType.FILE);&#xd;\n    try {&#xd;\n     // now copy the  screenshot to desired location using copyFile //method&#xd;\n        FileUtils.copyFile(src, new File(&quot;Reporting/&quot;+ip+&quot;SanityLogin_logout&quot;+vars.get(&quot;Itr&quot;)+&quot;i&quot;+vars.get(&quot;usr&quot;)+&quot;u&quot;+&quot;.png&quot;));&#xd;\n    }&#xd;\n    catch (IOException e)&#xd;\n     {&#xd;\n       WDS.log.info(&quot;something wrong&quot;);&#xd;\n     }&#xd;\n }&#xd;\n finally{&#xd;\n        try {&#xd;\n           InetAddress ipAddr = InetAddress.getLocalHost();&#xd;\n          vars.put(&quot;ip&quot;,String.valueOf(ipAddr.getHostAddress()));&#xd;\n&#xd;\n            } catch (UnknownHostException ex) {&#xd;\n                ex.printStackTrace();&#xd;\n            }&#xd;\n    EndTime=LocalDateTime.now();&#xd;\n    f = new FileOutputStream(&quot;TimestampsFolder/Timestamp_SanityLogin_&quot;+vars.get(&quot;ip&quot;)+&quot;.txt&quot;,true); &#xd;\n    p = new PrintStream(f);&#xd;\n    WDS.log.info(&quot; EndTime = &quot;+EndTime);&#xd;\n    WDS.sampleResult.sampleEnd();&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: Overlay = &quot;+vars.get(&quot;overlay&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: login = &quot;+vars.get(&quot;login&quot;));&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: logout = &quot;+vars.get(&quot;logout&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: startTime = &quot;+vars.get(&quot;StartTime&quot;));&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: EndTime = &quot;+EndTime);&#xd;\n    LocalDateTime StartTime = LocalDateTime.parse(vars.get(&quot;StartTime&quot;));&#xd;\n    Long minutesBetween=ChronoUnit.MILLIS.between(StartTime,EndTime);&#xd;\n    p.println(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    WDS.log.info(&quot;Login: itrNO = &quot;+vars.get(&quot;Itr&quot;)+&quot;i: user = &quot;+vars.get(&quot;usr&quot;)+&quot;u: TotalTime = &quot;+minutesBetween);&#xd;\n    p.close();&#xd;\n }</stringProp>\n            <stringProp name="WebDriverSampler.parameters"></stringProp>\n            <stringProp name="WebDriverSampler.language">beanshell</stringProp>\n          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>\n          <hashTree/>\n        </hashTree>\n      </hashTree>\n    </hashTree>\n    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">\n      <boolProp name="WorkBench.save">true</boolProp>\n    </WorkBench>\n    <hashTree/>\n  </hashTree>\n</jmeterTestPlan>\n'
04/06/2018 06:25:05 PM - __name__ - INFO - Script Execution
04/06/2018 06:25:05 PM - __name__ - INFO - Execution Type : Script Execution
04/06/2018 06:25:05 PM - __name__ - INFO - Execution Parameters : {'browser': 'chrome', 'iteration': 2, 'concurrency': 2, 'url': 'https://app.mammoth.io/#/login', 'timeout': 2400, 'rampup': 3, 'ips': ['192.168.0.8', '192.168.0.7', '172.23.1.79']}
04/06/2018 06:25:05 PM - __name__ - INFO - Starting Execution
04/06/2018 06:25:05 PM - __name__ - INFO - {'platform': 'Windows-10-10.0.16299-SP0', 'processor': 'Intel64 Family 6 Model 158 Stepping 9, GenuineIntel', 'version': '10.0.16299', 'system': 'Windows', 'name': uname_result(system='Windows', node='DESKTOP-4HBDBJJ', release='10', version='10.0.16299', machine='AMD64', processor='Intel64 Family 6 Model 158 Stepping 9, GenuineIntel'), 'mechine': 'AMD64'}
04/06/2018 06:25:05 PM - __name__ - INFO - Execution Started
04/06/2018 06:25:05 PM - __name__ - INFO - COMMAND:: -r -Gusers=2 -Grampup=3 -Gcount=2 -Gduration=2400 -GUrl=https://app.mammoth.io/#/login
04/06/2018 06:25:05 PM - __name__ - INFO - Connected to 192.168.0.8
04/06/2018 06:25:05 PM - __name__ - INFO - COMMAND:: -r -Gusers=2 -Grampup=3 -Gcount=2 -Gduration=2400 -GUrl=https://app.mammoth.io/#/login
04/06/2018 06:25:05 PM - __name__ - INFO - Executing in 192.168.0.8
04/06/2018 06:25:11 PM - __name__ - INFO - 192.168.0.8: b"Error in NonGUIDriver java.lang.IllegalArgumentException: Problem loading XML from:'C:\\Users\\Yajana\\PycharmProjects\\Distributed-setup-4\\Distributed-Setup\\Client\\file_received.jmx', missing class com.thoughtworks.xstream.converters.ConversionException: \n---- Debugging information ----\ncause-exception     : com.thoughtworks.xstream.converters.ConversionException\ncause-message       : \nfirst-jmeter-class  : org.apache.jmeter.save.converters.TestElementConverter.unmarshal(TestElementConverter.java:107)\nclass               : org.apache.jmeter.save.ScriptWrapper\nrequired-type       : org.apache.jmeter.testelement.property.BooleanProperty\nconverter-type      : org.apache.jmeter.save.ScriptWrapperConverter\npath                : /jmeterTestPlan/hashTree/WorkBench/boolProp\nline number         : 325\nversion             : 3.3 r1808647\n-------------------------------\r\n"
